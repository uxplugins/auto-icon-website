{"version":3,"file":"react-syntax-highlighter_languages_refractor_handlebars-0c736a43325c4e7ab938.js","mappings":"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","sources":["webpack://auto-icon/./node_modules/refractor/lang/handlebars.js","webpack://auto-icon/./node_modules/refractor/lang/markup-templating.js"],"sourcesContent":["'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = handlebars;\nhandlebars.displayName = 'handlebars';\nhandlebars.aliases = [];\n\nfunction handlebars(Prism) {\n  Prism.register(refractorMarkupTemplating);\n\n  (function (Prism) {\n    Prism.languages.handlebars = {\n      comment: /\\{\\{![\\s\\S]*?\\}\\}/,\n      delimiter: {\n        pattern: /^\\{\\{\\{?|\\}\\}\\}?$/i,\n        alias: 'punctuation'\n      },\n      string: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n      boolean: /\\b(?:true|false)\\b/,\n      block: {\n        pattern: /^(\\s*~?\\s*)[#\\/]\\S+?(?=\\s*~?\\s*$|\\s)/i,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      brackets: {\n        pattern: /\\[[^\\]]+\\]/,\n        inside: {\n          punctuation: /\\[|\\]/,\n          variable: /[\\s\\S]+/\n        }\n      },\n      punctuation: /[!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n      variable: /[^!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n    };\n    Prism.hooks.add('before-tokenize', function (env) {\n      var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n    });\n  })(Prism);\n}","'use strict';\n\nmodule.exports = markupTemplating;\nmarkupTemplating.displayName = 'markupTemplating';\nmarkupTemplating.aliases = [];\n\nfunction markupTemplating(Prism) {\n  ;\n\n  (function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___';\n    }\n\n    Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function value(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return;\n          }\n\n          var tokenStack = env.tokenStack = [];\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match;\n            }\n\n            var i = tokenStack.length;\n            var placeholder; // Check for existing strings\n\n            while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n              ++i;\n            } // Create a sparse array\n\n\n            tokenStack[i] = match;\n            return placeholder;\n          }); // Switch the grammar to markup\n\n          env.grammar = Prism.languages.markup;\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function value(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return;\n          } // Switch the grammar back\n\n\n          env.grammar = Prism.languages[language];\n          var j = 0;\n          var keys = Object.keys(env.tokenStack);\n\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break;\n              }\n\n              var token = tokens[i];\n\n              if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n                var k = keys[j];\n                var t = env.tokenStack[k];\n                var s = typeof token === 'string' ? token : token.content;\n                var placeholder = getPlaceholder(language, k);\n                var index = s.indexOf(placeholder);\n\n                if (index > -1) {\n                  ++j;\n                  var before = s.substring(0, index);\n                  var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                  var after = s.substring(index + placeholder.length);\n                  var replacement = [];\n\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]));\n                  }\n\n                  replacement.push(middle);\n\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]));\n                  }\n\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                  } else {\n                    token.content = replacement;\n                  }\n                }\n              } else if (token.content\n              /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content);\n              }\n            }\n\n            return tokens;\n          }\n\n          walkTokens(env.tokens);\n        }\n      }\n    });\n  })(Prism);\n}"],"names":["refractorMarkupTemplating","handlebars","Prism","register","languages","comment","delimiter","pattern","alias","string","number","boolean","block","lookbehind","brackets","inside","punctuation","variable","hooks","add","env","buildPlaceholders","tokenizePlaceholders","module","exports","displayName","aliases","markupTemplating","getPlaceholder","language","index","toUpperCase","Object","defineProperties","value","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","i","length","indexOf","grammar","markup","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat"],"sourceRoot":""}